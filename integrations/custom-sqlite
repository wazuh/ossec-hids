#!/usr/bin/env python3
 
import sys
import json
import sqlite3
import os
import shutil

# Variables
db_dir = '/var/ossec/var/db/integrations/'
db_file = 'alerts.db'
db_name = (db_dir + db_file)
alert_file = open(sys.argv[1], mode='r') 

def read_alert():
    """Read the alert file generated by integratord"""

    alert = json.loads(alert_file.read())
    alert_file.close()
    return alert

def extract_json():
    """Extract fields from the alert and output a tuple for sqlite"""

    alert_json = read_alert()
    alert_id = alert_json['id']
    alert_time =  alert_json['timestamp']
    alert_level = alert_json['rule']['level']
    alert_description = alert_json['rule']['description']

    if 'agentless' in alert_json:
        alert_agent = alert_json['agentless']['host']
    else:
        alert_agent = alert_json['agent']['name']

    alert_tuple = (alert_id, alert_level, alert_description, alert_time, alert_agent)

    return alert_tuple

def pre_db_check():
    try:
        os.mkdir(db_dir)
    except FileExistsError:
        pass

    os.chmod(db_dir, 0o775)
    shutil.chown(db_dir, group='ossec')

def post_db_check():
    # Make the file writable by operators in the ossec group
    # so they can use the review menu
    # TODO: check the mode rather than running this every time
    try:
        os.chmod(db_name, 0o664)
    except OSError:
        pass

def insert_alert(fields):
    """Update the sqlite database with the alert info"""

    alert_tuple = fields
    conn = sqlite3.connect(db_name)

    cur = conn.cursor()

    cur.execute('''CREATE TABLE IF NOT EXISTS alert
        (
        id              INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        alert_id        VARCHAR(30) NOT NULL,
        alert_level     TINYINT NOT NULL,
        alert_desc      TEXT NOT NULL,
        alert_time      TEXT NOT NULL,
        agent_name      VARCHAR(64) NOT NULL,
        classification  TEXT
        )''')

    cur.execute('INSERT INTO alert (alert_id,alert_level,alert_desc,alert_time,agent_name) VALUES (?,?,?,?,?)', alert_tuple)

    conn.commit()
    conn.close()


def main():
    pre_db_check()
    alert_tuple = extract_json()
    insert_alert(alert_tuple)
    post_db_check()
    sys.exit(0)

if __name__ == "__main__":
    main()
